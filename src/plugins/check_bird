#!/usr/bin/perl -w

use strict;
use warnings;

use FindBin;
use lib "${FindBin::Bin}/../lib";

use Data::Dumper;

use Monitoring::Plugin;
use birdctl;

my $mp = Monitoring::Plugin->new(
  usage     => "Usage: %s -i <instance> [ -m <max_retries> -n <retry_interval> -r <table> -z -s <socket> ]",
  plugin    => "check_bird",
  shortname => "BIRD",
  version   => "0.4",
  url       => 'https://github.com/ninech/nagios-plugins-bird/',
  blurb     => 'This plugin tests bird protocol instances.',
);
$mp->add_arg(
  spec      => "instance|i=s",
  help      => "The name of the routing instance (like bgp session) to monitor.",
  required  => 1,
);
$mp->add_arg(
  spec      => "max_retries|m=i",
  help      => "maximum retries to fetch the protocol instance before rising an error.",
  default   => 0,
);
$mp->add_arg(
  spec      => "retry_interval|n=i",
  help      => "retry interval in seconds.",
  default   => 10,
);
$mp->add_arg(
  spec      => "table|r=s",
  help      => "The table to search for routes.",
  default   => "master",
);
$mp->add_arg(
  spec      => "zero|z",
  help      => "Whether zero routes is an error.",
);
$mp->add_arg(
  spec      => "socket|s=s",
  help      => "The location of the BIRD control socket.",
  default   => "/var/run/bird/bird.ctl",
);
$mp->getopts;

# per default Monitoring::Pluins have a timeout of 15 second, if we test multiple runs
# we like to increase the plugin timeout
my $timeout = $mp->opts->timeout + ($mp->opts->max_retries) * $mp->opts->retry_interval;

# Handle timeouts (also triggers on invalid command)
$SIG{ALRM} = sub { $mp->plugin_exit(CRITICAL, "Timeout (possibly invalid command)") };
alarm $timeout;

eval q{
  my $bird = new birdctl(socket => $mp->opts->socket, restrict => 1);

  # Check instance status (columns listed below)
  #  name   proto   table   state   since   info
  #  0      1       2       3       4       5
  my @status;

  for (my $round = 0; $round <= $mp->opts->max_retries; $round++) {

    foreach ($bird->long_cmd("show protocols " . $mp->opts->instance)) {
      # Find the first 1002 line.
      /^1002-/ and @status = split(/\s+/, substr($_, 5)) and last;
      # Fall through: no information found, print closing line.
      /^\d{4} / and $round == ($mp->opts->max_retries+1) and $mp->plugin_exit(CRITICAL, $_);
    }

    # try again
    if (($status[3] ne "up") and ($round != $mp->opts->max_retries+1)) {
      sleep($mp->opts->retry_interval);
      next;
    }

    # all retries don't receive an 'up' state
    if ($status[3] ne "up") {
      if ($status[5]) {
        $mp->plugin_exit(CRITICAL, "Protocol $status[0] is $status[3] - info: $status[5]");
      }
      else {
        $mp->plugin_exit(CRITICAL, "Protocol $status[0] is $status[3] - info: Protocol / Instance Down");
      }
    }

    # state is 'up'
    # Inspect routes imported from this protocol
    $_ = $bird->cmd("show route table " . $mp->opts->table . " protocol " . $mp->opts->instance . " count");
    /^0014 (\d+) of \d+ routes for \d+ networks$/ or $mp->plugin_exit(CRITICAL, $_);

    # Final status
    $mp->plugin_exit(
      $mp->opts->zero && $1 eq "0" ? CRITICAL : OK,
      "Protocol / Instance $status[0] is $status[3] - $1 routes imported."
    );
  }
};
if ($@) { $mp->plugin_exit(CRITICAL, $@); }
